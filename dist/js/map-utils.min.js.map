{"version":3,"file":"map-utils.min.js","sources":["projections/euclidean.js","maptypes/coordinate.js","maptypes/greyscale.js","utils/dimensions.js","overlays/canvas.js","overlays/raphael.js","map-utils.js"],"names":[],"mappings":"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","sourcesContent":["(function (factory) {\r\n\r\n    \"use strict\";\r\n\r\n    if (typeof define === \"function\" && define.amd) {\r\n\r\n        // AMD. Register as an anonymous module.\r\n        define('projections/euclidean',factory);\r\n    } else {\r\n\r\n        // Browser globals\r\n        factory();\r\n    }\r\n}(function () {\r\n\r\n    \"use strict\";\r\n\r\n    var EuclideanProjection = function () {\r\n        var EUCLIDEAN_RANGE = 256;\r\n        this.pixelOrigin = new google.maps.Point(EUCLIDEAN_RANGE / 2, EUCLIDEAN_RANGE / 2);\r\n        this.pixelsPerLonDegree = EUCLIDEAN_RANGE / 360;\r\n        this.pixelsPerLonRadian = EUCLIDEAN_RANGE / (2 * Math.PI);\r\n        this.scaleLat = 2;\r\n        this.scaleLng = 1;\r\n    };\r\n\r\n    EuclideanProjection.prototype = {\r\n        pixelOrigin: new google.maps.Point(0, 0),\r\n        pixelsPerLonDegree: 0,\r\n        pixelsPerLonRadian: 0,\r\n        scaleLat: 0,\r\n        scaleLng: 0,\r\n        offsetLat: 0,\r\n        offsetLng: 0,\r\n\r\n        fromLatLngToPoint: function (latLng, opt_point) {\r\n            var point = opt_point || new google.maps.Point(0, 0);\r\n            point.x = this.pixelOrigin.x + (latLng.lng() + this.offsetLng) * this.pixelsPerLonDegree * this.scaleLng;\r\n            point.y = this.pixelOrigin.y + (-1 * latLng.lat() + this.offsetLat) * this.pixelsPerLonDegree * this.scaleLat;\r\n            return point;\r\n        },\r\n\r\n        fromPointToLatLng: function (point) {\r\n            var lng = (point.x - this.pixelOrigin.x) / this.pixelsPerLonDegree / this.scaleLng - this.offsetLng,\r\n                lat = -1 * (point.y - this.pixelOrigin.y) / this.pixelsPerLonDegree / this.scaleLat - this.offsetLat;\r\n            return new google.maps.LatLng(lat, lng, true);\r\n        }\r\n    };\r\n\r\n    google.maps.EuclideanProjection = EuclideanProjection;\r\n\r\n}));\r\n\n","(function (factory) {\r\n\r\n    \"use strict\";\r\n\r\n    if (typeof define === \"function\" && define.amd) {\r\n\r\n        // AMD. Register as an anonymous module.\r\n        define('maptypes/coordinate',[\r\n            \"../projections/euclidean\"\r\n        ], factory);\r\n    } else {\r\n\r\n        // Browser globals\r\n        factory();\r\n    }\r\n}(function () {\r\n\r\n    \"use strict\";\r\n\r\n    var CoordinateMapType = function (url) {\r\n        this.url = url;\r\n    };\r\n\r\n    CoordinateMapType.prototype = {\r\n        name: \"Coordinate Map Type\",\r\n        minZoom: 0,\r\n        maxZoom: 5,\r\n        tileSize: new google.maps.Size(256, 256),\r\n        projection: new google.maps.EuclideanProjection(),\r\n        url: \"\",\r\n\r\n        getTile: function (coord, zoom, ownerDocument) {\r\n            var div = ownerDocument.createElement(\"div\"),\r\n                c = 1 << zoom,\r\n                x = coord.x,\r\n                y = coord.y;\r\n\r\n            if (y < 0 || y >= c || x < 0 || x >= c || zoom > 4) {\r\n                div.style.height = \"256px\";\r\n                div.style.width = \"256px\";\r\n                div.style.backgroundColor = \"#fcf8ed\";\r\n                div.style.fontSize = \"9\";\r\n                div.style.textAlign = \"center\";\r\n                div.innerHTML = zoom > 4 ? \"Sorry, we have no map <br /> images for this zoom level.\" : \"\";\r\n                return div;\r\n            }\r\n\r\n            for (var g = 0, f = \"t\"; g < zoom; g++) {\r\n                c = c / 2;\r\n                if (y < c) {\r\n                    if (x < c) {\r\n                        f += \"q\";\r\n                    } else {\r\n                        f += \"r\";\r\n                        x -= c;\r\n                    }\r\n                } else {\r\n                    if (x < c) {\r\n                        f += \"t\";\r\n                        y -= c;\r\n                    } else {\r\n                        f += \"s\";\r\n                        x -= c;\r\n                        y -= c;\r\n                    }\r\n                }\r\n            }\r\n\r\n            div.innerHTML = \"<img src=\\\"http://www.thekremercollection.com/art/img/paintings/zoom/portrait_of_a_spanish_grande_tiles_14/\" + f + \".jpg\\\" alt=\\\"\\\" width=\\\"256\\\" height=\\\"256\\\" />\";\r\n\r\n            return div;\r\n        }\r\n    };\r\n\r\n    google.maps.CoordinateMapType = CoordinateMapType;\r\n\r\n}));\n","(function (factory) {\r\n\r\n    \"use strict\";\r\n\r\n    if (typeof define === \"function\" && define.amd) {\r\n\r\n        // AMD. Register as an anonymous module.\r\n        define('maptypes/greyscale',[\r\n            \"../projections/euclidean\"\r\n        ], factory);\r\n    } else {\r\n\r\n        // Browser globals\r\n        factory();\r\n    }\r\n}(function () {\r\n\r\n    \"use strict\";\r\n\r\n    var GreyscaleMapType = function (url) {\r\n        this.url = url;\r\n    };\r\n\r\n    GreyscaleMapType.prototype = {\r\n        name: \"Greyscale Map Type\",\r\n        minZoom: 0,\r\n        maxZoom: 5,\r\n        tileSize: new google.maps.Size(256, 256),\r\n        projection: new google.maps.EuclideanProjection(),\r\n        url: \"\",\r\n        getTile: function (coord, zoom, ownerDocument) {\r\n            var div = ownerDocument.createElement(\"div\"),\r\n                c = 1 << zoom,\r\n                x = coord.x,\r\n                y = coord.y;\r\n\r\n            if (y < 0 || y >= c || x < 0 || x >= c || zoom > 4) {\r\n                div.style.height = \"256px\";\r\n                div.style.width = \"256px\";\r\n                div.style.backgroundColor = \"#fcf8ed\";\r\n                div.style.fontSize = \"9\";\r\n                div.style.textAlign = \"center\";\r\n                div.innerHTML = zoom > 4 ? \"Sorry, we have no map <br /> images for this zoom level.\" : \"\";\r\n                return div;\r\n            }\r\n\r\n            for (var g = 0, f = \"t\"; g < zoom; g++) {\r\n                c = c / 2;\r\n                if (y < c) {\r\n                    if (x < c) {\r\n                        f += \"q\";\r\n                    } else {\r\n                        f += \"r\";\r\n                        x -= c;\r\n                    }\r\n                } else {\r\n                    if (x < c) {\r\n                        f += \"t\";\r\n                        y -= c;\r\n                    } else {\r\n                        f += \"s\";\r\n                        x -= c;\r\n                        y -= c;\r\n                    }\r\n                }\r\n            }\r\n\r\n            var canvas = ownerDocument.createElement(\"canvas\"),\r\n                context = canvas.getContext(\"2d\"),\r\n                img = new Image();\r\n\r\n            canvas.setAttribute(\"width\", 256);\r\n            canvas.setAttribute(\"height\", 256);\r\n\r\n            img.crossOrigin = \"anonymous\"; // http://example.com/crossdomain.xml\r\n            img.src = \"http://www.thekremercollection.com/art/img/paintings/zoom/portrait_of_a_spanish_grande_tiles_14/\" + f + \".jpg\";\r\n            img.onload = function () {\r\n                context.drawImage(img, 0, 0);\r\n                var imgdata = context.getImageData(0, 0, 256, 256),\r\n                    pix = imgdata.data;\r\n                for (var i = 0, grayscale = 0, n = pix.length; i < n; i += 4) {\r\n                    grayscale = pix[i] * 0.3 + pix[i + 1] * 0.59 + pix[i + 2] * 0.11;\r\n                    pix[i] = grayscale;  // red\r\n                    pix[i + 1] = grayscale;  // green\r\n                    pix[i + 2] = grayscale;  // blue\r\n                }\r\n                context.putImageData(imgdata, 0, 0);\r\n            };\r\n\r\n            div.appendChild(canvas);\r\n            return div;\r\n        }\r\n    };\r\n\r\n    google.maps.GreyscaleMapType = GreyscaleMapType;\r\n\r\n}));\n","(function (factory) {\n\n    \"use strict\";\n\n    if (typeof define === \"function\" && define.amd) {\n\n        // AMD. Register as an anonymous module.\n        define('utils/dimensions',factory);\n    } else {\n\n        // Browser globals\n        factory();\n    }\n}(function () {\n\n    \"use strict\";\n\n    function Dimensions (view) {\n        this._view = view;\n    }\n\n    Dimensions.prototype._view = null;\n\n    Dimensions.prototype.fromLatLngToDivPixel = function (latlng) {\n        return this._view.getProjection().fromLatLngToDivPixel(latlng);\n    };\n\n    Dimensions.prototype.getScaleRate = function (data, zoom) {\n        if (\"zoom\" in data) {\n            if (\"min\" in data.zoom && data.zoom.min > zoom) {\n                console.log(\"Zoom out of range for \" + data.type);\n            } else if (\"max\" in data.zoom && zoom > data.zoom.max) {\n                console.log(\"Zoom out of range for \" + data.type);\n            }\n            if (\"adjusted\" in data.zoom) {\n                zoom -= data.zoom.adjusted;\n            } else if (\"min\" in data.zoom) {\n                zoom -= data.zoom.min;\n            }\n        }\n        return 1 << zoom;\n    };\n\n    Dimensions.prototype.ellipse = function (data, param) {\n        var scale = this.getScaleRate(data, param.zoom),\n            x, y, r, rx, ry, point;\n\n        if (data.center instanceof google.maps.LatLng || data.position instanceof google.maps.LatLng) {\n            point = this.fromLatLngToDivPixel(data.center || data.position);\n        } else if (data.center instanceof google.maps.Point || data.position instanceof google.maps.Point) {\n            point = data.center || data.position;\n        } else {\n            throw new Error(\"Unrecognized data type\");\n        }\n\n        rx = scale * data.rx;\n        ry = scale * data.ry;\n        r = scale * data.radius;\n        x = point.x - param.left;\n        y = point.y - param.top;\n\n        var ne = this.fromLatLngToDivPixel(param.bounds.getNorthEast());\n        var sw = this.fromLatLngToDivPixel(param.bounds.getSouthWest());\n\n        // contains\n        if (\n            Math.pow(sw.x - param.left - x, 2) / Math.pow(rx || r, 2) + Math.pow(sw.y - param.top - y, 2) / Math.pow(ry || r, 2) < 1 &&\n            Math.pow(sw.x - param.left - x, 2) / Math.pow(rx || r, 2) + Math.pow(ne.y - param.top - y, 2) / Math.pow(ry || r, 2) < 1 &&\n            Math.pow(ne.x - param.left - x, 2) / Math.pow(rx || r, 2) + Math.pow(sw.y - param.top - y, 2) / Math.pow(ry || r, 2) < 1 &&\n            Math.pow(ne.x - param.left - x, 2) / Math.pow(rx || r, 2) + Math.pow(ne.y - param.top - y, 2) / Math.pow(ry || r, 2) < 1\n            ) {\n            return this.fillAllMap(param);\n        }\n\n        return {\n            figure: {x: x, y: y, rx: rx, ry: ry, r: r, data: data.data},\n            dimension: {left: (rx || r) - x, top: (ry || r) - y, right: (rx || r) + x - param.worldWidth, bottom: (ry || r) + y - param.worldWidth}\n        };\n    };\n\n    Dimensions.prototype.circle = function (data, param) {\n        return this.ellipse(data, param);\n    };\n\n    Dimensions.prototype.text = function (data, param) {\n        var point = this.fromLatLngToDivPixel(data.position),\n            x = point.x - param.left,\n            y = point.y - param.top;\n\n        return {\n            figure: {x: x, y: y, text: data.text}\n        };\n    };\n\n    Dimensions.prototype.polygon = function (data, param) {\n        var //scale = this.getScaleRate(data, param.zoom),\n            line = [],\n            point;\n\n        for (var i = 0, j = data.position.length; i < j; i++) {\n            point = this.fromLatLngToDivPixel(data.position[i]);\n            line.push([\n                    i === 0 ? \"M\" : \"L\",\n                    point.x - param.left,\n                    point.y - param.top\n            ]);\n        }\n        line.push([\"Z\"]);\n\n        return {\n            figure: {path: Raphael.pathToRelative(line)}\n        };\n    };\n\n    Dimensions.prototype.path = function (data, param) {\n        var scale = this.getScaleRate(data, param.zoom),\n            point = this.fromLatLngToDivPixel(data.position),\n            path = Raphael.pathToRelative(Raphael.parsePathString(data.path)),\n            line = [];\n\n        for (var i = 0, p = path.length; i < p; i++) {\n            for (var j = 0, l = path[i].length; j < l; j++) {\n                if (j === 0) {\n                    line[i] = [path[i][j]];\n                } else if (i === 0 && j === 1) {\n                    line[i].push(point.x - param.left + path[i][j] * scale);\n                } else if (i === 0 && j === 2) {\n                    line[i].push(point.y - param.top + path[i][j] * scale);\n                } else {\n                    line[i].push(path[i][j] * scale);\n                }\n            }\n        }\n\n        return {\n            figure: {path: line}\n        };\n    };\n\n    Dimensions.prototype.rect = function (data, param) {\n        var scale = this.getScaleRate(data, param.zoom),\n            ne, sw, x, y, height, width, r, point, center, fixed;\n\n        if (data.position instanceof google.maps.LatLngBounds) {\n            // contains\n            if (\n                data.position.contains(param.bounds.getNorthEast()) &&\n                data.position.contains(param.bounds.getSouthWest())\n                ) {\n                return this.fillAllMap(param);\n            }\n            ne = this.fromLatLngToDivPixel(data.position.getNorthEast());\n            sw = this.fromLatLngToDivPixel(data.position.getSouthWest());\n            width = ne.x - sw.x;\n            height = sw.y - ne.y;\n            x = sw.x - param.left;\n            y = ne.y - param.top;\n            r = scale * data.radius;\n            fixed = 1;\n        } else {\n\n            if (data.position instanceof google.maps.LatLng) {\n                point = this.fromLatLngToDivPixel(data.position);\n                center = 0;\n                fixed = 1;\n            } else if (data.position instanceof google.maps.Point) {\n                point = data.position;\n                center = 0;\n                fixed = -1;\n            } else if (data.center instanceof google.maps.LatLng) {\n                point = this.fromLatLngToDivPixel(data.center);\n                center = 1 / 2;\n                fixed = 1;\n            } else if (data.center instanceof google.maps.Point) {\n                point = data.center;\n                center = 1 / 2;\n                fixed = -1;\n            } else {\n                throw new Error(\"Unrecognized data type\");\n            }\n\n            ne = this.fromLatLngToDivPixel(param.bounds.getNorthEast());\n            sw = this.fromLatLngToDivPixel(param.bounds.getSouthWest());\n            width = data.size.width * scale;\n            height = data.size.height * scale;\n            r = data.radius * scale;\n            x = point.x - width * center - param.left;\n            y = point.y - height * center - param.top;\n\n            // contains\n            if (\n                x <= sw.x - param.left &&\n                y <= ne.y - param.top &&\n                x + width >= ne.x - param.left &&\n                y + height >= sw.y - param.top\n                ) {\n                return this.fillAllMap(param);\n            }\n        }\n\n        return {\n            figure: {x: x, y: y, width: width, height: height, r: r, src: data.src},\n            dimension: {left: -x, top: -y, right: width + x - param.worldWidth * fixed, bottom: height + y - param.worldWidth * fixed},\n            type: data.type\n        };\n    };\n\n    Dimensions.prototype.image = function (data, param) {\n        return this.rect(data, param);\n    };\n\n    Dimensions.prototype.fillAllMap = function (param) {\n        var ne, sw, x, y, height, width;\n\n        ne = this.fromLatLngToDivPixel(param.bounds.getNorthEast());\n        sw = this.fromLatLngToDivPixel(param.bounds.getSouthWest());\n        width = ne.x - sw.x;\n        height = sw.y - ne.y;\n        x = sw.x - param.left;\n        y = ne.y - param.top;\n\n        return {\n            figure: {x: x, y: y, width: width, height: height, r: 0},\n            dimension: {left: -x, top: -y, right: width + x - param.worldWidth, bottom: height + y - param.worldWidth},\n            type: \"rect\"\n        };\n    };\n\n    Dimensions.prototype.piechart = function (data, param) {\n        return this.ellipse(data, param);\n    };\n\n    Dimensions.prototype.barchart = function (data, param) {\n        return this.rect(data, param);\n    };\n\n    Dimensions.prototype.hbarchart = function (data, param) {\n        return this.rect(data, param);\n    };\n\n    Dimensions.prototype.linechart = function (data, param) {\n        return this.rect(data, param);\n    };\n\n    Dimensions.prototype.dotchart = function (data, param) {\n        return this.rect(data, param);\n    };\n\n    google.maps.Dimensions = Dimensions;\n\n}));\n","(function (factory) {\r\n\r\n    \"use strict\";\r\n\r\n    if (typeof define === \"function\" && define.amd) {\r\n\r\n        // AMD. Register as an anonymous module.\r\n        define('overlays/canvas',[\r\n            \"../utils/dimensions\"\r\n        ], factory);\r\n    } else {\r\n\r\n        // Browser globals\r\n        factory();\r\n    }\r\n}(function () {\r\n\r\n    \"use strict\";\r\n\r\n    function CanvasOverlay (options) {\r\n        this.setMap(options.map);\r\n        this.shapes = options.shapes || [];\r\n        this.intervals = [];\r\n        this.dimensions = new google.maps.Dimensions(this);\r\n    }\r\n\r\n    CanvasOverlay.prototype = new google.maps.OverlayView();\r\n\r\n    CanvasOverlay.prototype.onAdd = function () {\r\n\r\n        var projection = this.getProjection(),\r\n            center = projection.fromLatLngToDivPixel(new google.maps.LatLng(0, 0)),\r\n            worldWidth = projection.getWorldWidth();\r\n\r\n        this.canvas = document.createElement(\"canvas\");\r\n        this.canvas.style.border = \"none\";\r\n        this.canvas.style.position = \"absolute\";\r\n        this.canvas.style.overflow = \"visible\";\r\n\r\n        this.canvas.width = worldWidth;\r\n        this.canvas.height = worldWidth;\r\n        this.canvas.style.left = center.x - worldWidth / 2 + \"px\";\r\n        this.canvas.style.top = center.y - worldWidth / 2 + \"px\";\r\n\r\n        this.getPanes().overlayImage.appendChild(this.canvas);\r\n    };\r\n\r\n    CanvasOverlay.prototype.draw = function () {\r\n        var projection = this.getProjection(),\r\n            center = projection.fromLatLngToDivPixel(new google.maps.LatLng(0, 0)),\r\n            bounds = this.getMap().getBounds(),\r\n            worldWidth = projection.getWorldWidth(),\r\n            left = center.x - worldWidth / 2,\r\n            top = center.y - worldWidth / 2,\r\n            zoom = this.getMap().getZoom(),\r\n            context = this.canvas.getContext(\"2d\"),\r\n            figures = [],\r\n            dim = {\r\n                left: [0],\r\n                top: [0],\r\n                right: [0],\r\n                bottom: [0]\r\n            };\r\n\r\n        for (var i = 0, j = this.intervals.length; i < j; i++) {\r\n            clearInterval(this.intervals[i]);\r\n        }\r\n\r\n        for (var s = 0, l = this.shapes.length; s < l; s++) {\r\n            try {\r\n\r\n                var data = this.dimensions.rect(this.shapes[s], {\r\n                    map: this.getMap(),\r\n                    bounds: bounds,\r\n                    worldWidth: worldWidth,\r\n                    zoom: zoom,\r\n                    left: left,\r\n                    top: top\r\n                });\r\n\r\n                if (\"dimension\" in data) {\r\n                    dim.left.push(data.dimension.left);\r\n                    dim.top.push(data.dimension.top);\r\n                    dim.right.push(data.dimension.right);\r\n                    dim.bottom.push(data.dimension.bottom);\r\n                }\r\n                figures.push(data);\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n\r\n        var offsetLeft = Math.max.apply(null, dim.left),\r\n            offsetTop = Math.max.apply(null, dim.top),\r\n            offsetRight = Math.max.apply(null, dim.right),\r\n            offsetBottom = Math.max.apply(null, dim.bottom),\r\n            fullWorldWidth = offsetLeft + worldWidth + offsetRight,\r\n            fullWorldHeight = offsetTop + worldWidth + offsetBottom;\r\n\r\n        this.canvas.style.left = left - offsetLeft + \"px\";\r\n        this.canvas.style.top = top - offsetTop + \"px\";\r\n        this.canvas.width = fullWorldWidth;\r\n        this.canvas.height = fullWorldHeight;\r\n\r\n        function draw(i, self, figures) {\r\n            self.intervals.push(setInterval(function () {\r\n                self.shapes[i].drawable.draw(context, {\r\n                    left: offsetLeft,\r\n                    top: offsetTop,\r\n                    right: offsetRight,\r\n                    bottom: offsetBottom,\r\n                    fullWorldWidth: fullWorldWidth,\r\n                    fullWorldHeight: fullWorldHeight\r\n                }, figures[i].figure, zoom);\r\n            }, self.shapes[i].interval));\r\n        }\r\n\r\n        for (var z = 0, x = this.shapes.length; z < x; z++) {\r\n            draw(z, this, figures);\r\n        }\r\n    };\r\n\r\n    CanvasOverlay.prototype.onRemove = function () {\r\n        this.canvas.parentNode.removeChild(this.canvas);\r\n    };\r\n\r\n    google.maps.CanvasOverlay = CanvasOverlay;\r\n\r\n}));\n","(function (factory) {\n\n    \"use strict\";\n\n    if (typeof define === \"function\" && define.amd) {\n\n        // AMD. Register as an anonymous module.\n        define('overlays/raphael',[\n            \"raphael\",\n            \"../utils/dimensions\"\n        ], factory);\n    } else {\n\n        // Browser globals\n        factory(Raphael);\n    }\n}(function () {\n\n    \"use strict\";\n\n    function RaphaelOverlayView(options) {\n        this.setMap(options.map);\n        this.shapes = options.shapes || [];\n        this.dimensions = new google.maps.Dimensions(this);\n    }\n\n    RaphaelOverlayView.prototype = new google.maps.OverlayView();\n\n    RaphaelOverlayView.prototype.onAdd = function () {\n\n        var projection = this.getProjection(),\n            center = projection.fromLatLngToDivPixel(new google.maps.LatLng(0, 0)),\n            worldWidth = projection.getWorldWidth();\n\n        this.div = document.createElement(\"div\");\n        this.div.style.border = \"none\";\n        this.div.style.position = \"absolute\";\n        this.div.style.overflow = \"visible\";\n\n        this.div.style.left = center.x - worldWidth / 2 + \"px\";\n        this.div.style.top = center.y - worldWidth / 2 + \"px\";\n        this.div.style.width = worldWidth + \"px\";\n        this.div.style.height = worldWidth + \"px\";\n\n        this.getPanes().overlayImage.appendChild(this.div);\n        this.canvas = Raphael(this.div);\n    };\n\n    RaphaelOverlayView.prototype.draw = function () {\n\n        var projection = this.getProjection(),\n            center = projection.fromLatLngToDivPixel(new google.maps.LatLng(0, 0)),\n            worldWidth = projection.getWorldWidth(),\n            bounds = this.getMap().getBounds(),\n            left = center.x - worldWidth / 2,\n            top = center.y - worldWidth / 2,\n            zoom = this.getMap().getZoom(),\n            shapes = [],\n            figures = [],\n            dim = {\n                left: [0],\n                top: [0],\n                right: [0],\n                bottom: [0]\n            };\n\n        this.canvas.clear();\n\n        for (var i = 0, j = this.shapes.length; i < j; i++) {\n            try {\n                var data = this.dimensions[this.shapes[i].type](this.shapes[i], {\n                    map: this.getMap(),\n                    bounds: bounds,\n                    worldWidth: worldWidth,\n                    zoom: zoom,\n                    left: left,\n                    top: top\n                });\n\n                if (\"dimension\" in data) {\n                    dim.left.push(data.dimension.left);\n                    dim.top.push(data.dimension.top);\n                    dim.right.push(data.dimension.right);\n                    dim.bottom.push(data.dimension.bottom);\n                }\n\n                figures.push({\n                    data: data.figure,\n                    type: data.type || this.shapes[i].type,\n                    attr: this.shapes[i].attr,\n                    info: this.shapes[i].info\n                });\n\n            } catch (e) {\n                console.log(e);\n            }\n        }\n\n        var offsetLeft = Math.max.apply(null, dim.left),\n            offsetTop = Math.max.apply(null, dim.top),\n            offsetRight = Math.max.apply(null, dim.right),\n            offsetBottom = Math.max.apply(null, dim.bottom),\n            fullWorldWidth = offsetLeft + worldWidth + offsetRight,\n            fullWorldHeight = offsetTop + worldWidth + offsetBottom;\n\n        this.div.style.left = left - offsetLeft + \"px\";\n        this.div.style.top = top - offsetTop + \"px\";\n        this.div.style.width = fullWorldWidth + \"px\";\n        this.div.style.height = fullWorldHeight + \"px\";\n        this.canvas.setSize(fullWorldWidth, fullWorldHeight);\n\n        for (var f = 0, l = figures.length; f < l; f++) {\n            shapes[f] = this._draw(figures[f].type, figures[f].data, {\n                left: offsetLeft,\n                top: offsetTop\n            }, this.clone(figures[f].info));\n            if (figures[f].attr) {\n                shapes[f].attr(figures[f].attr);\n            }\n        }\n    };\n\n    RaphaelOverlayView.prototype.onRemove = function () {\n        this.canvas.clear();\n        this.div.parentNode.removeChild(this.div);\n    };\n\n    RaphaelOverlayView.prototype.clone = function (obj) {\n        return obj ? JSON.parse(JSON.stringify(obj)) : {};\n    };\n\n    RaphaelOverlayView.prototype._draw = function (type, data, param, info) {\n        switch (type) {\n            case \"path\" :\n            case \"polygon\" :\n                data.path[0][1] += param.left;\n                data.path[0][2] += param.top;\n                return this.canvas.path(data.path);\n            case \"text\":\n                return this.canvas.text(\n                        data.x + param.left,\n                        data.y + param.top,\n                    data.text\n                );\n            case \"image\":\n                return this.canvas.image(\n                    data.src,\n                        data.x + param.left,\n                        data.y + param.top,\n                    data.width,\n                    data.height\n                );\n            case \"rect\":\n                return this.canvas.rect(\n                        data.x + param.left,\n                        data.y + param.top,\n                    data.width,\n                    data.height,\n                    data.r\n                );\n            case \"circle\":\n                return this.canvas.circle(\n                        data.x + param.left,\n                        data.y + param.top,\n                    data.r\n                );\n            case \"ellipse\":\n                return this.canvas.ellipse(\n                        data.x + param.left,\n                        data.y + param.top,\n                    data.rx,\n                    data.ry\n                );\n            case \"piechart\":\n                return this.canvas.piechart(\n                        data.x + param.left,\n                        data.y + param.top,\n                    data.r,\n                    info.data\n                );\n            case \"barchart\":\n                return this.canvas.barchart(\n                        data.x + param.left,\n                        data.y + param.top,\n                    data.width,\n                    data.height,\n                    info.data,\n                    info.param\n                );\n            case \"hbarchart\":\n                return this.canvas.hbarchart(\n                        data.x + param.left,\n                        data.y + param.top,\n                    data.width,\n                    data.height,\n                    info.data,\n                    info.param\n                );\n            case \"linechart\":\n                return this.canvas.linechart(\n                        data.x + param.left,\n                        data.y + param.top,\n                    data.width,\n                    data.height,\n                    info.x,\n                    info.y,\n                    info.param\n                );\n            case \"dotchart\":\n                return this.canvas.dotchart(\n                        data.x + param.left,\n                        data.y + param.top,\n                    data.width,\n                    data.height,\n                    info.xs,\n                    info.ys,\n                    info.data,\n                    info.param\n                );\n            default:\n                throw new Error(\"Unrecognized data type: \" + data.type);\n        }\n    };\n\n    google.maps.RaphaelOverlayView = RaphaelOverlayView;\n\n}));\n","require([\n    \"maptypes/coordinate\",\n    \"maptypes/greyscale\",\n    \"overlays/canvas\",\n    \"overlays/raphael\"\n], function () {\n    \"use strict\";\n\n    console.log(\"map-utils loaded!\");\n\n});\ndefine(\"map-utils\", function(){});\n\n"]}